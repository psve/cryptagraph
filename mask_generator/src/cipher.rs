use std::cmp;
use utility;

/* A structure that represents an S-box.
 *
 * size     Size of the S-box input in number of bits.
 * table    The table that describes the S-box.
 */
#[derive(Clone, Debug)]
pub struct Sbox {
    pub size: usize,
    table: Vec<u8>,
    pub lat: Vec<Vec<usize>>,
    pub min_max_corr: Vec<(f64, f64)>,
}

impl Sbox {
    /* Generates a new S-box from a table.
     *
     * table    A table discribing the S-box transformation.
     */
    fn new(size: usize, table: Vec<u8>) -> Sbox {
        let lat = Sbox::generate_lat(&table, size);
        let min_max_corr = Sbox::generate_min_max_corr(&lat, size);
        Sbox{size: size, table: table, lat: lat, min_max_corr: min_max_corr}
    }

    /* Generates the LAT associated with the S-box. */
    fn generate_lat(table: &Vec<u8>, sbox_size: usize) -> Vec<Vec<usize>> {
        let lat_size = 1 << sbox_size;
        let mut lat = vec![vec![0; lat_size]; lat_size];

        for plaintext in 0..lat_size {
            let ciphertext = table[plaintext];

            for alpha in 0..lat_size {
                for beta in 0..lat_size {
                    let parity = utility::parity_masks(plaintext as u64,
                                                       ciphertext as u64,
                                                       alpha as u64,
                                                       beta as u64);

                    lat[alpha as usize][beta as usize] += (1 - parity) as usize;
                }
            }
        }

        lat
    }

    fn generate_min_max_corr(lat: &Vec<Vec<usize>>, sbox_size: usize) -> Vec<(f64, f64)> {
        let balance = (1 << (sbox_size - 1)) as i16;
        let mut min_max_corr = vec![(0.0, 1.0); 1 << sbox_size];

        for (i, row) in lat.iter().enumerate() {
            let (min, max) = row.iter()
                                .filter(|&x| *x as i16 != balance)
                                .fold((i16::max_value(), 0),
                                      |acc, &x|
                                      (cmp::min(acc.0, (x as i16 - balance).abs()),
                                       cmp::max(acc.1, (x as i16 - balance).abs())));
            let (min_corr, max_corr) = ((min as f64 / balance as f64).powi(2),
                                        (max as f64 / balance as f64).powi(2));
            min_max_corr[i] = (min_corr, max_corr);
        }

        min_max_corr
    }
}

/* A trait defining an SPN cipher */
pub trait Cipher: Send + Sync {
    /* Returns the size of the cipher input in bits. */
    fn size(&self) -> usize;

    /* Returns the number of S-boxes in the non-linear layer. */
    fn num_sboxes(&self) -> usize;

    /* Returns the S-box of the cipher */
    fn sbox(&self) -> &Sbox;

    /* Applies the linear layer of the cipher.
     *
     * input    The input to the linear layer.
     */
    fn linear_layer(&self, input: u64) -> u64;

    /* Applies the inverse linear layer, st.
     *
     * I = linear_layer_inv o linear_layer
     */
    fn linear_layer_inv(&self, input: u64) -> u64;

    /* Returns the name of the cipher. */
    fn name(&self) -> String;
}

pub fn name_to_cipher(name : &str) -> Option<Box<(Cipher + Sync)>> {
    match name {
        "present"   => Some(Box::new(Present::new())),
        "gift"      => Some(Box::new(Gift::new())),
        "twine"     => Some(Box::new(Twine::new())),
        "puffin"    => Some(Box::new(Puffin::new())),
        "skinny"    => Some(Box::new(Skinny::new())),
        "midori"    => Some(Box::new(Midori::new())),
        "led"       => Some(Box::new(Led::new())),
        "rectangle" => Some(Box::new(Rectangle::new())),
        _ => None
    }
}

/*****************************************************************
                            PRESENT
******************************************************************/

/* A structure representing the PRESENT cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The PRESENT S-box.
 * permutation  The PRESENT bit permutation.
 */
#[derive(Clone)]
pub struct Present {
    size: usize,
    sbox: Sbox
}

impl Present {
    const PERMUTATION_INV : [[u64 ; 0x100] ; 8] = include!("present.inv.perm");
    const PERMUTATION     : [[u64 ; 0x100] ; 8] = include!("present.perm");

    /* Generates a new instance of the PRESENT cipher */
    pub fn new() -> Present {
        let table = vec![0xc, 0x5, 0x6, 0xb,
                         0x9, 0x0, 0xa, 0xd,
                         0x3, 0xe, 0xf, 0x8,
                         0x4, 0x7, 0x1, 0x2];
        Present{size: 64, sbox: Sbox::new(4, table)}
    }
}

impl Cipher for Present {

    /* Returns the size of the input to PRESENT. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in PRESENT. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the PRESENT S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the bit permutation of PRESENT to the input.
     *
     * input    Input to be permuted.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut output = 0;
        for i in 0..8 {
            output ^= Present::PERMUTATION[i][((input >> (i*8)) & 0xff) as usize];
        }
        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        let mut output = 0;
        for i in 0..8 {
            output ^= Present::PERMUTATION_INV[i][((input >> (i*8)) & 0xff) as usize];
        }
        output
    }

    /* Returns the string "PRESENT". */
    fn name(&self) -> String {
        String::from("PRESENT")
    }
}


/*****************************************************************
                            GIFT
******************************************************************/

/* A structure representing the GIFT cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The GIFT S-box.
 * permutation  The GIFT bit permutation.
 */
#[derive(Clone)]
pub struct Gift {
    size: usize,
    sbox: Sbox,
    permutation: [[u64; 256]; 8]
}

impl Gift {
    /* Generates a new instance of the GIFT cipher */
    pub fn new() -> Gift {
        let table = vec![0x1, 0xa, 0x4, 0xc, 0x6, 0xf, 0x3, 0x9, 0x2, 0xd, 0xb, 0x7, 0x5, 0x0, 0x8, 0xe];

        let permutation = [[0x0,0x1,0x20000,0x20001,0x400000000,0x400000001,0x400020000,0x400020001,0x8000000000000,0x8000000000001,0x8000000020000,0x8000000020001,0x8000400000000,0x8000400000001,0x8000400020000,0x8000400020001,0x1000000000000,0x1000000000001,0x1000000020000,0x1000000020001,0x1000400000000,0x1000400000001,0x1000400020000,0x1000400020001,0x9000000000000,0x9000000000001,0x9000000020000,0x9000000020001,0x9000400000000,0x9000400000001,0x9000400020000,0x9000400020001,0x2,0x3,0x20002,0x20003,0x400000002,0x400000003,0x400020002,0x400020003,0x8000000000002,0x8000000000003,0x8000000020002,0x8000000020003,0x8000400000002,0x8000400000003,0x8000400020002,0x8000400020003,0x1000000000002,0x1000000000003,0x1000000020002,0x1000000020003,0x1000400000002,0x1000400000003,0x1000400020002,0x1000400020003,0x9000000000002,0x9000000000003,0x9000000020002,0x9000000020003,0x9000400000002,0x9000400000003,0x9000400020002,0x9000400020003,0x40000,0x40001,0x60000,0x60001,0x400040000,0x400040001,0x400060000,0x400060001,0x8000000040000,0x8000000040001,0x8000000060000,0x8000000060001,0x8000400040000,0x8000400040001,0x8000400060000,0x8000400060001,0x1000000040000,0x1000000040001,0x1000000060000,0x1000000060001,0x1000400040000,0x1000400040001,0x1000400060000,0x1000400060001,0x9000000040000,0x9000000040001,0x9000000060000,0x9000000060001,0x9000400040000,0x9000400040001,0x9000400060000,0x9000400060001,0x40002,0x40003,0x60002,0x60003,0x400040002,0x400040003,0x400060002,0x400060003,0x8000000040002,0x8000000040003,0x8000000060002,0x8000000060003,0x8000400040002,0x8000400040003,0x8000400060002,0x8000400060003,0x1000000040002,0x1000000040003,0x1000000060002,0x1000000060003,0x1000400040002,0x1000400040003,0x1000400060002,0x1000400060003,0x9000000040002,0x9000000040003,0x9000000060002,0x9000000060003,0x9000400040002,0x9000400040003,0x9000400060002,0x9000400060003,0x800000000,0x800000001,0x800020000,0x800020001,0xc00000000,0xc00000001,0xc00020000,0xc00020001,0x8000800000000,0x8000800000001,0x8000800020000,0x8000800020001,0x8000c00000000,0x8000c00000001,0x8000c00020000,0x8000c00020001,0x1000800000000,0x1000800000001,0x1000800020000,0x1000800020001,0x1000c00000000,0x1000c00000001,0x1000c00020000,0x1000c00020001,0x9000800000000,0x9000800000001,0x9000800020000,0x9000800020001,0x9000c00000000,0x9000c00000001,0x9000c00020000,0x9000c00020001,0x800000002,0x800000003,0x800020002,0x800020003,0xc00000002,0xc00000003,0xc00020002,0xc00020003,0x8000800000002,0x8000800000003,0x8000800020002,0x8000800020003,0x8000c00000002,0x8000c00000003,0x8000c00020002,0x8000c00020003,0x1000800000002,0x1000800000003,0x1000800020002,0x1000800020003,0x1000c00000002,0x1000c00000003,0x1000c00020002,0x1000c00020003,0x9000800000002,0x9000800000003,0x9000800020002,0x9000800020003,0x9000c00000002,0x9000c00000003,0x9000c00020002,0x9000c00020003,0x800040000,0x800040001,0x800060000,0x800060001,0xc00040000,0xc00040001,0xc00060000,0xc00060001,0x8000800040000,0x8000800040001,0x8000800060000,0x8000800060001,0x8000c00040000,0x8000c00040001,0x8000c00060000,0x8000c00060001,0x1000800040000,0x1000800040001,0x1000800060000,0x1000800060001,0x1000c00040000,0x1000c00040001,0x1000c00060000,0x1000c00060001,0x9000800040000,0x9000800040001,0x9000800060000,0x9000800060001,0x9000c00040000,0x9000c00040001,0x9000c00060000,0x9000c00060001,0x800040002,0x800040003,0x800060002,0x800060003,0xc00040002,0xc00040003,0xc00060002,0xc00060003,0x8000800040002,0x8000800040003,0x8000800060002,0x8000800060003,0x8000c00040002,0x8000c00040003,0x8000c00060002,0x8000c00060003,0x1000800040002,0x1000800040003,0x1000800060002,0x1000800060003,0x1000c00040002,0x1000c00040003,0x1000c00060002,0x1000c00060003,0x9000800040002,0x9000800040003,0x9000800060002,0x9000800060003,0x9000c00040002,0x9000c00040003,0x9000c00060002,0x9000c00060003],
                           [0x0,0x100000000,0x2000000000000,0x2000100000000,0x4,0x100000004,0x2000000000004,0x2000100000004,0x80000,0x100080000,0x2000000080000,0x2000100080000,0x80004,0x100080004,0x2000000080004,0x2000100080004,0x10000,0x100010000,0x2000000010000,0x2000100010000,0x10004,0x100010004,0x2000000010004,0x2000100010004,0x90000,0x100090000,0x2000000090000,0x2000100090000,0x90004,0x100090004,0x2000000090004,0x2000100090004,0x200000000,0x300000000,0x2000200000000,0x2000300000000,0x200000004,0x300000004,0x2000200000004,0x2000300000004,0x200080000,0x300080000,0x2000200080000,0x2000300080000,0x200080004,0x300080004,0x2000200080004,0x2000300080004,0x200010000,0x300010000,0x2000200010000,0x2000300010000,0x200010004,0x300010004,0x2000200010004,0x2000300010004,0x200090000,0x300090000,0x2000200090000,0x2000300090000,0x200090004,0x300090004,0x2000200090004,0x2000300090004,0x4000000000000,0x4000100000000,0x6000000000000,0x6000100000000,0x4000000000004,0x4000100000004,0x6000000000004,0x6000100000004,0x4000000080000,0x4000100080000,0x6000000080000,0x6000100080000,0x4000000080004,0x4000100080004,0x6000000080004,0x6000100080004,0x4000000010000,0x4000100010000,0x6000000010000,0x6000100010000,0x4000000010004,0x4000100010004,0x6000000010004,0x6000100010004,0x4000000090000,0x4000100090000,0x6000000090000,0x6000100090000,0x4000000090004,0x4000100090004,0x6000000090004,0x6000100090004,0x4000200000000,0x4000300000000,0x6000200000000,0x6000300000000,0x4000200000004,0x4000300000004,0x6000200000004,0x6000300000004,0x4000200080000,0x4000300080000,0x6000200080000,0x6000300080000,0x4000200080004,0x4000300080004,0x6000200080004,0x6000300080004,0x4000200010000,0x4000300010000,0x6000200010000,0x6000300010000,0x4000200010004,0x4000300010004,0x6000200010004,0x6000300010004,0x4000200090000,0x4000300090000,0x6000200090000,0x6000300090000,0x4000200090004,0x4000300090004,0x6000200090004,0x6000300090004,0x8,0x100000008,0x2000000000008,0x2000100000008,0xc,0x10000000c,0x200000000000c,0x200010000000c,0x80008,0x100080008,0x2000000080008,0x2000100080008,0x8000c,0x10008000c,0x200000008000c,0x200010008000c,0x10008,0x100010008,0x2000000010008,0x2000100010008,0x1000c,0x10001000c,0x200000001000c,0x200010001000c,0x90008,0x100090008,0x2000000090008,0x2000100090008,0x9000c,0x10009000c,0x200000009000c,0x200010009000c,0x200000008,0x300000008,0x2000200000008,0x2000300000008,0x20000000c,0x30000000c,0x200020000000c,0x200030000000c,0x200080008,0x300080008,0x2000200080008,0x2000300080008,0x20008000c,0x30008000c,0x200020008000c,0x200030008000c,0x200010008,0x300010008,0x2000200010008,0x2000300010008,0x20001000c,0x30001000c,0x200020001000c,0x200030001000c,0x200090008,0x300090008,0x2000200090008,0x2000300090008,0x20009000c,0x30009000c,0x200020009000c,0x200030009000c,0x4000000000008,0x4000100000008,0x6000000000008,0x6000100000008,0x400000000000c,0x400010000000c,0x600000000000c,0x600010000000c,0x4000000080008,0x4000100080008,0x6000000080008,0x6000100080008,0x400000008000c,0x400010008000c,0x600000008000c,0x600010008000c,0x4000000010008,0x4000100010008,0x6000000010008,0x6000100010008,0x400000001000c,0x400010001000c,0x600000001000c,0x600010001000c,0x4000000090008,0x4000100090008,0x6000000090008,0x6000100090008,0x400000009000c,0x400010009000c,0x600000009000c,0x600010009000c,0x4000200000008,0x4000300000008,0x6000200000008,0x6000300000008,0x400020000000c,0x400030000000c,0x600020000000c,0x600030000000c,0x4000200080008,0x4000300080008,0x6000200080008,0x6000300080008,0x400020008000c,0x400030008000c,0x600020008000c,0x600030008000c,0x4000200010008,0x4000300010008,0x6000200010008,0x6000300010008,0x400020001000c,0x400030001000c,0x600020001000c,0x600030001000c,0x4000200090008,0x4000300090008,0x6000200090008,0x6000300090008,0x400020009000c,0x400030009000c,0x600020009000c,0x600030009000c],
                           [0x0,0x10,0x200000,0x200010,0x4000000000,0x4000000010,0x4000200000,0x4000200010,0x80000000000000,0x80000000000010,0x80000000200000,0x80000000200010,0x80004000000000,0x80004000000010,0x80004000200000,0x80004000200010,0x10000000000000,0x10000000000010,0x10000000200000,0x10000000200010,0x10004000000000,0x10004000000010,0x10004000200000,0x10004000200010,0x90000000000000,0x90000000000010,0x90000000200000,0x90000000200010,0x90004000000000,0x90004000000010,0x90004000200000,0x90004000200010,0x20,0x30,0x200020,0x200030,0x4000000020,0x4000000030,0x4000200020,0x4000200030,0x80000000000020,0x80000000000030,0x80000000200020,0x80000000200030,0x80004000000020,0x80004000000030,0x80004000200020,0x80004000200030,0x10000000000020,0x10000000000030,0x10000000200020,0x10000000200030,0x10004000000020,0x10004000000030,0x10004000200020,0x10004000200030,0x90000000000020,0x90000000000030,0x90000000200020,0x90000000200030,0x90004000000020,0x90004000000030,0x90004000200020,0x90004000200030,0x400000,0x400010,0x600000,0x600010,0x4000400000,0x4000400010,0x4000600000,0x4000600010,0x80000000400000,0x80000000400010,0x80000000600000,0x80000000600010,0x80004000400000,0x80004000400010,0x80004000600000,0x80004000600010,0x10000000400000,0x10000000400010,0x10000000600000,0x10000000600010,0x10004000400000,0x10004000400010,0x10004000600000,0x10004000600010,0x90000000400000,0x90000000400010,0x90000000600000,0x90000000600010,0x90004000400000,0x90004000400010,0x90004000600000,0x90004000600010,0x400020,0x400030,0x600020,0x600030,0x4000400020,0x4000400030,0x4000600020,0x4000600030,0x80000000400020,0x80000000400030,0x80000000600020,0x80000000600030,0x80004000400020,0x80004000400030,0x80004000600020,0x80004000600030,0x10000000400020,0x10000000400030,0x10000000600020,0x10000000600030,0x10004000400020,0x10004000400030,0x10004000600020,0x10004000600030,0x90000000400020,0x90000000400030,0x90000000600020,0x90000000600030,0x90004000400020,0x90004000400030,0x90004000600020,0x90004000600030,0x8000000000,0x8000000010,0x8000200000,0x8000200010,0xc000000000,0xc000000010,0xc000200000,0xc000200010,0x80008000000000,0x80008000000010,0x80008000200000,0x80008000200010,0x8000c000000000,0x8000c000000010,0x8000c000200000,0x8000c000200010,0x10008000000000,0x10008000000010,0x10008000200000,0x10008000200010,0x1000c000000000,0x1000c000000010,0x1000c000200000,0x1000c000200010,0x90008000000000,0x90008000000010,0x90008000200000,0x90008000200010,0x9000c000000000,0x9000c000000010,0x9000c000200000,0x9000c000200010,0x8000000020,0x8000000030,0x8000200020,0x8000200030,0xc000000020,0xc000000030,0xc000200020,0xc000200030,0x80008000000020,0x80008000000030,0x80008000200020,0x80008000200030,0x8000c000000020,0x8000c000000030,0x8000c000200020,0x8000c000200030,0x10008000000020,0x10008000000030,0x10008000200020,0x10008000200030,0x1000c000000020,0x1000c000000030,0x1000c000200020,0x1000c000200030,0x90008000000020,0x90008000000030,0x90008000200020,0x90008000200030,0x9000c000000020,0x9000c000000030,0x9000c000200020,0x9000c000200030,0x8000400000,0x8000400010,0x8000600000,0x8000600010,0xc000400000,0xc000400010,0xc000600000,0xc000600010,0x80008000400000,0x80008000400010,0x80008000600000,0x80008000600010,0x8000c000400000,0x8000c000400010,0x8000c000600000,0x8000c000600010,0x10008000400000,0x10008000400010,0x10008000600000,0x10008000600010,0x1000c000400000,0x1000c000400010,0x1000c000600000,0x1000c000600010,0x90008000400000,0x90008000400010,0x90008000600000,0x90008000600010,0x9000c000400000,0x9000c000400010,0x9000c000600000,0x9000c000600010,0x8000400020,0x8000400030,0x8000600020,0x8000600030,0xc000400020,0xc000400030,0xc000600020,0xc000600030,0x80008000400020,0x80008000400030,0x80008000600020,0x80008000600030,0x8000c000400020,0x8000c000400030,0x8000c000600020,0x8000c000600030,0x10008000400020,0x10008000400030,0x10008000600020,0x10008000600030,0x1000c000400020,0x1000c000400030,0x1000c000600020,0x1000c000600030,0x90008000400020,0x90008000400030,0x90008000600020,0x90008000600030,0x9000c000400020,0x9000c000400030,0x9000c000600020,0x9000c000600030],
                           [0x0,0x1000000000,0x20000000000000,0x20001000000000,0x40,0x1000000040,0x20000000000040,0x20001000000040,0x800000,0x1000800000,0x20000000800000,0x20001000800000,0x800040,0x1000800040,0x20000000800040,0x20001000800040,0x100000,0x1000100000,0x20000000100000,0x20001000100000,0x100040,0x1000100040,0x20000000100040,0x20001000100040,0x900000,0x1000900000,0x20000000900000,0x20001000900000,0x900040,0x1000900040,0x20000000900040,0x20001000900040,0x2000000000,0x3000000000,0x20002000000000,0x20003000000000,0x2000000040,0x3000000040,0x20002000000040,0x20003000000040,0x2000800000,0x3000800000,0x20002000800000,0x20003000800000,0x2000800040,0x3000800040,0x20002000800040,0x20003000800040,0x2000100000,0x3000100000,0x20002000100000,0x20003000100000,0x2000100040,0x3000100040,0x20002000100040,0x20003000100040,0x2000900000,0x3000900000,0x20002000900000,0x20003000900000,0x2000900040,0x3000900040,0x20002000900040,0x20003000900040,0x40000000000000,0x40001000000000,0x60000000000000,0x60001000000000,0x40000000000040,0x40001000000040,0x60000000000040,0x60001000000040,0x40000000800000,0x40001000800000,0x60000000800000,0x60001000800000,0x40000000800040,0x40001000800040,0x60000000800040,0x60001000800040,0x40000000100000,0x40001000100000,0x60000000100000,0x60001000100000,0x40000000100040,0x40001000100040,0x60000000100040,0x60001000100040,0x40000000900000,0x40001000900000,0x60000000900000,0x60001000900000,0x40000000900040,0x40001000900040,0x60000000900040,0x60001000900040,0x40002000000000,0x40003000000000,0x60002000000000,0x60003000000000,0x40002000000040,0x40003000000040,0x60002000000040,0x60003000000040,0x40002000800000,0x40003000800000,0x60002000800000,0x60003000800000,0x40002000800040,0x40003000800040,0x60002000800040,0x60003000800040,0x40002000100000,0x40003000100000,0x60002000100000,0x60003000100000,0x40002000100040,0x40003000100040,0x60002000100040,0x60003000100040,0x40002000900000,0x40003000900000,0x60002000900000,0x60003000900000,0x40002000900040,0x40003000900040,0x60002000900040,0x60003000900040,0x80,0x1000000080,0x20000000000080,0x20001000000080,0xc0,0x10000000c0,0x200000000000c0,0x200010000000c0,0x800080,0x1000800080,0x20000000800080,0x20001000800080,0x8000c0,0x10008000c0,0x200000008000c0,0x200010008000c0,0x100080,0x1000100080,0x20000000100080,0x20001000100080,0x1000c0,0x10001000c0,0x200000001000c0,0x200010001000c0,0x900080,0x1000900080,0x20000000900080,0x20001000900080,0x9000c0,0x10009000c0,0x200000009000c0,0x200010009000c0,0x2000000080,0x3000000080,0x20002000000080,0x20003000000080,0x20000000c0,0x30000000c0,0x200020000000c0,0x200030000000c0,0x2000800080,0x3000800080,0x20002000800080,0x20003000800080,0x20008000c0,0x30008000c0,0x200020008000c0,0x200030008000c0,0x2000100080,0x3000100080,0x20002000100080,0x20003000100080,0x20001000c0,0x30001000c0,0x200020001000c0,0x200030001000c0,0x2000900080,0x3000900080,0x20002000900080,0x20003000900080,0x20009000c0,0x30009000c0,0x200020009000c0,0x200030009000c0,0x40000000000080,0x40001000000080,0x60000000000080,0x60001000000080,0x400000000000c0,0x400010000000c0,0x600000000000c0,0x600010000000c0,0x40000000800080,0x40001000800080,0x60000000800080,0x60001000800080,0x400000008000c0,0x400010008000c0,0x600000008000c0,0x600010008000c0,0x40000000100080,0x40001000100080,0x60000000100080,0x60001000100080,0x400000001000c0,0x400010001000c0,0x600000001000c0,0x600010001000c0,0x40000000900080,0x40001000900080,0x60000000900080,0x60001000900080,0x400000009000c0,0x400010009000c0,0x600000009000c0,0x600010009000c0,0x40002000000080,0x40003000000080,0x60002000000080,0x60003000000080,0x400020000000c0,0x400030000000c0,0x600020000000c0,0x600030000000c0,0x40002000800080,0x40003000800080,0x60002000800080,0x60003000800080,0x400020008000c0,0x400030008000c0,0x600020008000c0,0x600030008000c0,0x40002000100080,0x40003000100080,0x60002000100080,0x60003000100080,0x400020001000c0,0x400030001000c0,0x600020001000c0,0x600030001000c0,0x40002000900080,0x40003000900080,0x60002000900080,0x60003000900080,0x400020009000c0,0x400030009000c0,0x600020009000c0,0x600030009000c0],
                           [0x0,0x100,0x2000000,0x2000100,0x40000000000,0x40000000100,0x40002000000,0x40002000100,0x800000000000000,0x800000000000100,0x800000002000000,0x800000002000100,0x800040000000000,0x800040000000100,0x800040002000000,0x800040002000100,0x100000000000000,0x100000000000100,0x100000002000000,0x100000002000100,0x100040000000000,0x100040000000100,0x100040002000000,0x100040002000100,0x900000000000000,0x900000000000100,0x900000002000000,0x900000002000100,0x900040000000000,0x900040000000100,0x900040002000000,0x900040002000100,0x200,0x300,0x2000200,0x2000300,0x40000000200,0x40000000300,0x40002000200,0x40002000300,0x800000000000200,0x800000000000300,0x800000002000200,0x800000002000300,0x800040000000200,0x800040000000300,0x800040002000200,0x800040002000300,0x100000000000200,0x100000000000300,0x100000002000200,0x100000002000300,0x100040000000200,0x100040000000300,0x100040002000200,0x100040002000300,0x900000000000200,0x900000000000300,0x900000002000200,0x900000002000300,0x900040000000200,0x900040000000300,0x900040002000200,0x900040002000300,0x4000000,0x4000100,0x6000000,0x6000100,0x40004000000,0x40004000100,0x40006000000,0x40006000100,0x800000004000000,0x800000004000100,0x800000006000000,0x800000006000100,0x800040004000000,0x800040004000100,0x800040006000000,0x800040006000100,0x100000004000000,0x100000004000100,0x100000006000000,0x100000006000100,0x100040004000000,0x100040004000100,0x100040006000000,0x100040006000100,0x900000004000000,0x900000004000100,0x900000006000000,0x900000006000100,0x900040004000000,0x900040004000100,0x900040006000000,0x900040006000100,0x4000200,0x4000300,0x6000200,0x6000300,0x40004000200,0x40004000300,0x40006000200,0x40006000300,0x800000004000200,0x800000004000300,0x800000006000200,0x800000006000300,0x800040004000200,0x800040004000300,0x800040006000200,0x800040006000300,0x100000004000200,0x100000004000300,0x100000006000200,0x100000006000300,0x100040004000200,0x100040004000300,0x100040006000200,0x100040006000300,0x900000004000200,0x900000004000300,0x900000006000200,0x900000006000300,0x900040004000200,0x900040004000300,0x900040006000200,0x900040006000300,0x80000000000,0x80000000100,0x80002000000,0x80002000100,0xc0000000000,0xc0000000100,0xc0002000000,0xc0002000100,0x800080000000000,0x800080000000100,0x800080002000000,0x800080002000100,0x8000c0000000000,0x8000c0000000100,0x8000c0002000000,0x8000c0002000100,0x100080000000000,0x100080000000100,0x100080002000000,0x100080002000100,0x1000c0000000000,0x1000c0000000100,0x1000c0002000000,0x1000c0002000100,0x900080000000000,0x900080000000100,0x900080002000000,0x900080002000100,0x9000c0000000000,0x9000c0000000100,0x9000c0002000000,0x9000c0002000100,0x80000000200,0x80000000300,0x80002000200,0x80002000300,0xc0000000200,0xc0000000300,0xc0002000200,0xc0002000300,0x800080000000200,0x800080000000300,0x800080002000200,0x800080002000300,0x8000c0000000200,0x8000c0000000300,0x8000c0002000200,0x8000c0002000300,0x100080000000200,0x100080000000300,0x100080002000200,0x100080002000300,0x1000c0000000200,0x1000c0000000300,0x1000c0002000200,0x1000c0002000300,0x900080000000200,0x900080000000300,0x900080002000200,0x900080002000300,0x9000c0000000200,0x9000c0000000300,0x9000c0002000200,0x9000c0002000300,0x80004000000,0x80004000100,0x80006000000,0x80006000100,0xc0004000000,0xc0004000100,0xc0006000000,0xc0006000100,0x800080004000000,0x800080004000100,0x800080006000000,0x800080006000100,0x8000c0004000000,0x8000c0004000100,0x8000c0006000000,0x8000c0006000100,0x100080004000000,0x100080004000100,0x100080006000000,0x100080006000100,0x1000c0004000000,0x1000c0004000100,0x1000c0006000000,0x1000c0006000100,0x900080004000000,0x900080004000100,0x900080006000000,0x900080006000100,0x9000c0004000000,0x9000c0004000100,0x9000c0006000000,0x9000c0006000100,0x80004000200,0x80004000300,0x80006000200,0x80006000300,0xc0004000200,0xc0004000300,0xc0006000200,0xc0006000300,0x800080004000200,0x800080004000300,0x800080006000200,0x800080006000300,0x8000c0004000200,0x8000c0004000300,0x8000c0006000200,0x8000c0006000300,0x100080004000200,0x100080004000300,0x100080006000200,0x100080006000300,0x1000c0004000200,0x1000c0004000300,0x1000c0006000200,0x1000c0006000300,0x900080004000200,0x900080004000300,0x900080006000200,0x900080006000300,0x9000c0004000200,0x9000c0004000300,0x9000c0006000200,0x9000c0006000300],
                           [0x0,0x10000000000,0x200000000000000,0x200010000000000,0x400,0x10000000400,0x200000000000400,0x200010000000400,0x8000000,0x10008000000,0x200000008000000,0x200010008000000,0x8000400,0x10008000400,0x200000008000400,0x200010008000400,0x1000000,0x10001000000,0x200000001000000,0x200010001000000,0x1000400,0x10001000400,0x200000001000400,0x200010001000400,0x9000000,0x10009000000,0x200000009000000,0x200010009000000,0x9000400,0x10009000400,0x200000009000400,0x200010009000400,0x20000000000,0x30000000000,0x200020000000000,0x200030000000000,0x20000000400,0x30000000400,0x200020000000400,0x200030000000400,0x20008000000,0x30008000000,0x200020008000000,0x200030008000000,0x20008000400,0x30008000400,0x200020008000400,0x200030008000400,0x20001000000,0x30001000000,0x200020001000000,0x200030001000000,0x20001000400,0x30001000400,0x200020001000400,0x200030001000400,0x20009000000,0x30009000000,0x200020009000000,0x200030009000000,0x20009000400,0x30009000400,0x200020009000400,0x200030009000400,0x400000000000000,0x400010000000000,0x600000000000000,0x600010000000000,0x400000000000400,0x400010000000400,0x600000000000400,0x600010000000400,0x400000008000000,0x400010008000000,0x600000008000000,0x600010008000000,0x400000008000400,0x400010008000400,0x600000008000400,0x600010008000400,0x400000001000000,0x400010001000000,0x600000001000000,0x600010001000000,0x400000001000400,0x400010001000400,0x600000001000400,0x600010001000400,0x400000009000000,0x400010009000000,0x600000009000000,0x600010009000000,0x400000009000400,0x400010009000400,0x600000009000400,0x600010009000400,0x400020000000000,0x400030000000000,0x600020000000000,0x600030000000000,0x400020000000400,0x400030000000400,0x600020000000400,0x600030000000400,0x400020008000000,0x400030008000000,0x600020008000000,0x600030008000000,0x400020008000400,0x400030008000400,0x600020008000400,0x600030008000400,0x400020001000000,0x400030001000000,0x600020001000000,0x600030001000000,0x400020001000400,0x400030001000400,0x600020001000400,0x600030001000400,0x400020009000000,0x400030009000000,0x600020009000000,0x600030009000000,0x400020009000400,0x400030009000400,0x600020009000400,0x600030009000400,0x800,0x10000000800,0x200000000000800,0x200010000000800,0xc00,0x10000000c00,0x200000000000c00,0x200010000000c00,0x8000800,0x10008000800,0x200000008000800,0x200010008000800,0x8000c00,0x10008000c00,0x200000008000c00,0x200010008000c00,0x1000800,0x10001000800,0x200000001000800,0x200010001000800,0x1000c00,0x10001000c00,0x200000001000c00,0x200010001000c00,0x9000800,0x10009000800,0x200000009000800,0x200010009000800,0x9000c00,0x10009000c00,0x200000009000c00,0x200010009000c00,0x20000000800,0x30000000800,0x200020000000800,0x200030000000800,0x20000000c00,0x30000000c00,0x200020000000c00,0x200030000000c00,0x20008000800,0x30008000800,0x200020008000800,0x200030008000800,0x20008000c00,0x30008000c00,0x200020008000c00,0x200030008000c00,0x20001000800,0x30001000800,0x200020001000800,0x200030001000800,0x20001000c00,0x30001000c00,0x200020001000c00,0x200030001000c00,0x20009000800,0x30009000800,0x200020009000800,0x200030009000800,0x20009000c00,0x30009000c00,0x200020009000c00,0x200030009000c00,0x400000000000800,0x400010000000800,0x600000000000800,0x600010000000800,0x400000000000c00,0x400010000000c00,0x600000000000c00,0x600010000000c00,0x400000008000800,0x400010008000800,0x600000008000800,0x600010008000800,0x400000008000c00,0x400010008000c00,0x600000008000c00,0x600010008000c00,0x400000001000800,0x400010001000800,0x600000001000800,0x600010001000800,0x400000001000c00,0x400010001000c00,0x600000001000c00,0x600010001000c00,0x400000009000800,0x400010009000800,0x600000009000800,0x600010009000800,0x400000009000c00,0x400010009000c00,0x600000009000c00,0x600010009000c00,0x400020000000800,0x400030000000800,0x600020000000800,0x600030000000800,0x400020000000c00,0x400030000000c00,0x600020000000c00,0x600030000000c00,0x400020008000800,0x400030008000800,0x600020008000800,0x600030008000800,0x400020008000c00,0x400030008000c00,0x600020008000c00,0x600030008000c00,0x400020001000800,0x400030001000800,0x600020001000800,0x600030001000800,0x400020001000c00,0x400030001000c00,0x600020001000c00,0x600030001000c00,0x400020009000800,0x400030009000800,0x600020009000800,0x600030009000800,0x400020009000c00,0x400030009000c00,0x600020009000c00,0x600030009000c00],
                           [0x0,0x1000,0x20000000,0x20001000,0x400000000000,0x400000001000,0x400020000000,0x400020001000,0x8000000000000000,0x8000000000001000,0x8000000020000000,0x8000000020001000,0x8000400000000000,0x8000400000001000,0x8000400020000000,0x8000400020001000,0x1000000000000000,0x1000000000001000,0x1000000020000000,0x1000000020001000,0x1000400000000000,0x1000400000001000,0x1000400020000000,0x1000400020001000,0x9000000000000000,0x9000000000001000,0x9000000020000000,0x9000000020001000,0x9000400000000000,0x9000400000001000,0x9000400020000000,0x9000400020001000,0x2000,0x3000,0x20002000,0x20003000,0x400000002000,0x400000003000,0x400020002000,0x400020003000,0x8000000000002000,0x8000000000003000,0x8000000020002000,0x8000000020003000,0x8000400000002000,0x8000400000003000,0x8000400020002000,0x8000400020003000,0x1000000000002000,0x1000000000003000,0x1000000020002000,0x1000000020003000,0x1000400000002000,0x1000400000003000,0x1000400020002000,0x1000400020003000,0x9000000000002000,0x9000000000003000,0x9000000020002000,0x9000000020003000,0x9000400000002000,0x9000400000003000,0x9000400020002000,0x9000400020003000,0x40000000,0x40001000,0x60000000,0x60001000,0x400040000000,0x400040001000,0x400060000000,0x400060001000,0x8000000040000000,0x8000000040001000,0x8000000060000000,0x8000000060001000,0x8000400040000000,0x8000400040001000,0x8000400060000000,0x8000400060001000,0x1000000040000000,0x1000000040001000,0x1000000060000000,0x1000000060001000,0x1000400040000000,0x1000400040001000,0x1000400060000000,0x1000400060001000,0x9000000040000000,0x9000000040001000,0x9000000060000000,0x9000000060001000,0x9000400040000000,0x9000400040001000,0x9000400060000000,0x9000400060001000,0x40002000,0x40003000,0x60002000,0x60003000,0x400040002000,0x400040003000,0x400060002000,0x400060003000,0x8000000040002000,0x8000000040003000,0x8000000060002000,0x8000000060003000,0x8000400040002000,0x8000400040003000,0x8000400060002000,0x8000400060003000,0x1000000040002000,0x1000000040003000,0x1000000060002000,0x1000000060003000,0x1000400040002000,0x1000400040003000,0x1000400060002000,0x1000400060003000,0x9000000040002000,0x9000000040003000,0x9000000060002000,0x9000000060003000,0x9000400040002000,0x9000400040003000,0x9000400060002000,0x9000400060003000,0x800000000000,0x800000001000,0x800020000000,0x800020001000,0xc00000000000,0xc00000001000,0xc00020000000,0xc00020001000,0x8000800000000000,0x8000800000001000,0x8000800020000000,0x8000800020001000,0x8000c00000000000,0x8000c00000001000,0x8000c00020000000,0x8000c00020001000,0x1000800000000000,0x1000800000001000,0x1000800020000000,0x1000800020001000,0x1000c00000000000,0x1000c00000001000,0x1000c00020000000,0x1000c00020001000,0x9000800000000000,0x9000800000001000,0x9000800020000000,0x9000800020001000,0x9000c00000000000,0x9000c00000001000,0x9000c00020000000,0x9000c00020001000,0x800000002000,0x800000003000,0x800020002000,0x800020003000,0xc00000002000,0xc00000003000,0xc00020002000,0xc00020003000,0x8000800000002000,0x8000800000003000,0x8000800020002000,0x8000800020003000,0x8000c00000002000,0x8000c00000003000,0x8000c00020002000,0x8000c00020003000,0x1000800000002000,0x1000800000003000,0x1000800020002000,0x1000800020003000,0x1000c00000002000,0x1000c00000003000,0x1000c00020002000,0x1000c00020003000,0x9000800000002000,0x9000800000003000,0x9000800020002000,0x9000800020003000,0x9000c00000002000,0x9000c00000003000,0x9000c00020002000,0x9000c00020003000,0x800040000000,0x800040001000,0x800060000000,0x800060001000,0xc00040000000,0xc00040001000,0xc00060000000,0xc00060001000,0x8000800040000000,0x8000800040001000,0x8000800060000000,0x8000800060001000,0x8000c00040000000,0x8000c00040001000,0x8000c00060000000,0x8000c00060001000,0x1000800040000000,0x1000800040001000,0x1000800060000000,0x1000800060001000,0x1000c00040000000,0x1000c00040001000,0x1000c00060000000,0x1000c00060001000,0x9000800040000000,0x9000800040001000,0x9000800060000000,0x9000800060001000,0x9000c00040000000,0x9000c00040001000,0x9000c00060000000,0x9000c00060001000,0x800040002000,0x800040003000,0x800060002000,0x800060003000,0xc00040002000,0xc00040003000,0xc00060002000,0xc00060003000,0x8000800040002000,0x8000800040003000,0x8000800060002000,0x8000800060003000,0x8000c00040002000,0x8000c00040003000,0x8000c00060002000,0x8000c00060003000,0x1000800040002000,0x1000800040003000,0x1000800060002000,0x1000800060003000,0x1000c00040002000,0x1000c00040003000,0x1000c00060002000,0x1000c00060003000,0x9000800040002000,0x9000800040003000,0x9000800060002000,0x9000800060003000,0x9000c00040002000,0x9000c00040003000,0x9000c00060002000,0x9000c00060003000],
                           [0x0,0x100000000000,0x2000000000000000,0x2000100000000000,0x4000,0x100000004000,0x2000000000004000,0x2000100000004000,0x80000000,0x100080000000,0x2000000080000000,0x2000100080000000,0x80004000,0x100080004000,0x2000000080004000,0x2000100080004000,0x10000000,0x100010000000,0x2000000010000000,0x2000100010000000,0x10004000,0x100010004000,0x2000000010004000,0x2000100010004000,0x90000000,0x100090000000,0x2000000090000000,0x2000100090000000,0x90004000,0x100090004000,0x2000000090004000,0x2000100090004000,0x200000000000,0x300000000000,0x2000200000000000,0x2000300000000000,0x200000004000,0x300000004000,0x2000200000004000,0x2000300000004000,0x200080000000,0x300080000000,0x2000200080000000,0x2000300080000000,0x200080004000,0x300080004000,0x2000200080004000,0x2000300080004000,0x200010000000,0x300010000000,0x2000200010000000,0x2000300010000000,0x200010004000,0x300010004000,0x2000200010004000,0x2000300010004000,0x200090000000,0x300090000000,0x2000200090000000,0x2000300090000000,0x200090004000,0x300090004000,0x2000200090004000,0x2000300090004000,0x4000000000000000,0x4000100000000000,0x6000000000000000,0x6000100000000000,0x4000000000004000,0x4000100000004000,0x6000000000004000,0x6000100000004000,0x4000000080000000,0x4000100080000000,0x6000000080000000,0x6000100080000000,0x4000000080004000,0x4000100080004000,0x6000000080004000,0x6000100080004000,0x4000000010000000,0x4000100010000000,0x6000000010000000,0x6000100010000000,0x4000000010004000,0x4000100010004000,0x6000000010004000,0x6000100010004000,0x4000000090000000,0x4000100090000000,0x6000000090000000,0x6000100090000000,0x4000000090004000,0x4000100090004000,0x6000000090004000,0x6000100090004000,0x4000200000000000,0x4000300000000000,0x6000200000000000,0x6000300000000000,0x4000200000004000,0x4000300000004000,0x6000200000004000,0x6000300000004000,0x4000200080000000,0x4000300080000000,0x6000200080000000,0x6000300080000000,0x4000200080004000,0x4000300080004000,0x6000200080004000,0x6000300080004000,0x4000200010000000,0x4000300010000000,0x6000200010000000,0x6000300010000000,0x4000200010004000,0x4000300010004000,0x6000200010004000,0x6000300010004000,0x4000200090000000,0x4000300090000000,0x6000200090000000,0x6000300090000000,0x4000200090004000,0x4000300090004000,0x6000200090004000,0x6000300090004000,0x8000,0x100000008000,0x2000000000008000,0x2000100000008000,0xc000,0x10000000c000,0x200000000000c000,0x200010000000c000,0x80008000,0x100080008000,0x2000000080008000,0x2000100080008000,0x8000c000,0x10008000c000,0x200000008000c000,0x200010008000c000,0x10008000,0x100010008000,0x2000000010008000,0x2000100010008000,0x1000c000,0x10001000c000,0x200000001000c000,0x200010001000c000,0x90008000,0x100090008000,0x2000000090008000,0x2000100090008000,0x9000c000,0x10009000c000,0x200000009000c000,0x200010009000c000,0x200000008000,0x300000008000,0x2000200000008000,0x2000300000008000,0x20000000c000,0x30000000c000,0x200020000000c000,0x200030000000c000,0x200080008000,0x300080008000,0x2000200080008000,0x2000300080008000,0x20008000c000,0x30008000c000,0x200020008000c000,0x200030008000c000,0x200010008000,0x300010008000,0x2000200010008000,0x2000300010008000,0x20001000c000,0x30001000c000,0x200020001000c000,0x200030001000c000,0x200090008000,0x300090008000,0x2000200090008000,0x2000300090008000,0x20009000c000,0x30009000c000,0x200020009000c000,0x200030009000c000,0x4000000000008000,0x4000100000008000,0x6000000000008000,0x6000100000008000,0x400000000000c000,0x400010000000c000,0x600000000000c000,0x600010000000c000,0x4000000080008000,0x4000100080008000,0x6000000080008000,0x6000100080008000,0x400000008000c000,0x400010008000c000,0x600000008000c000,0x600010008000c000,0x4000000010008000,0x4000100010008000,0x6000000010008000,0x6000100010008000,0x400000001000c000,0x400010001000c000,0x600000001000c000,0x600010001000c000,0x4000000090008000,0x4000100090008000,0x6000000090008000,0x6000100090008000,0x400000009000c000,0x400010009000c000,0x600000009000c000,0x600010009000c000,0x4000200000008000,0x4000300000008000,0x6000200000008000,0x6000300000008000,0x400020000000c000,0x400030000000c000,0x600020000000c000,0x600030000000c000,0x4000200080008000,0x4000300080008000,0x6000200080008000,0x6000300080008000,0x400020008000c000,0x400030008000c000,0x600020008000c000,0x600030008000c000,0x4000200010008000,0x4000300010008000,0x6000200010008000,0x6000300010008000,0x400020001000c000,0x400030001000c000,0x600020001000c000,0x600030001000c000,0x4000200090008000,0x4000300090008000,0x6000200090008000,0x6000300090008000,0x400020009000c000,0x400030009000c000,0x600020009000c000,0x600030009000c000]];

        Gift{size: 64, sbox: Sbox::new(4, table), permutation: permutation}
    }
}

impl Cipher for Gift {
    /* Returns the size of the input to GIFT. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in GIFT. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the GIFT S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the bit permutation of GIFT to the input.
     *
     * input    Input to be permuted.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut output = 0;

        for i in 0..8 {
            output ^= self.permutation[i][((input >> (i*8)) & 0xff) as usize];
        }

        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "GIFT". */
    fn name(&self) -> String {
        String::from("GIFT")
    }
}



/*****************************************************************
                            TWINE
******************************************************************/

/* A structure representing the TWINE cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The Feistel function of TWINE represented as an S-box. Key addition ignored.
 * permutation  The TWINE nibble permutation.
 */
#[derive(Clone)]
pub struct Twine {
    size: usize,
    sbox: Sbox,
    permutation: [u64; 16],
}

impl Twine {
    /* Generates a new instance of the TWINE cipher */
    pub fn new() -> Twine {
        let table = vec![
            0x0c, 0x0d, 0x0e, 0x0f, 0x08, 0x09, 0x0a, 0x0b, 0x04, 0x05, 0x06, 0x07, 0x00, 0x01, 0x02, 0x03,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
            0x2f, 0x2e, 0x2d, 0x2c, 0x2b, 0x2a, 0x29, 0x28, 0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20,
            0x3a, 0x3b, 0x38, 0x39, 0x3e, 0x3f, 0x3c, 0x3d, 0x32, 0x33, 0x30, 0x31, 0x36, 0x37, 0x34, 0x35,
            0x42, 0x43, 0x40, 0x41, 0x46, 0x47, 0x44, 0x45, 0x4a, 0x4b, 0x48, 0x49, 0x4e, 0x4f, 0x4c, 0x4d,
            0x5b, 0x5a, 0x59, 0x58, 0x5f, 0x5e, 0x5d, 0x5c, 0x53, 0x52, 0x51, 0x50, 0x57, 0x56, 0x55, 0x54,
            0x69, 0x68, 0x6b, 0x6a, 0x6d, 0x6c, 0x6f, 0x6e, 0x61, 0x60, 0x63, 0x62, 0x65, 0x64, 0x67, 0x66,
            0x75, 0x74, 0x77, 0x76, 0x71, 0x70, 0x73, 0x72, 0x7d, 0x7c, 0x7f, 0x7e, 0x79, 0x78, 0x7b, 0x7a,
            0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x93, 0x92, 0x91, 0x90, 0x97, 0x96, 0x95, 0x94, 0x9b, 0x9a, 0x99, 0x98, 0x9f, 0x9e, 0x9d, 0x9c,
            0xad, 0xac, 0xaf, 0xae, 0xa9, 0xa8, 0xab, 0xaa, 0xa5, 0xa4, 0xa7, 0xa6, 0xa1, 0xa0, 0xa3, 0xa2,
            0xb7, 0xb6, 0xb5, 0xb4, 0xb3, 0xb2, 0xb1, 0xb0, 0xbf, 0xbe, 0xbd, 0xbc, 0xbb, 0xba, 0xb9, 0xb8,
            0xc1, 0xc0, 0xc3, 0xc2, 0xc5, 0xc4, 0xc7, 0xc6, 0xc9, 0xc8, 0xcb, 0xca, 0xcd, 0xcc, 0xcf, 0xce,
            0xde, 0xdf, 0xdc, 0xdd, 0xda, 0xdb, 0xd8, 0xd9, 0xd6, 0xd7, 0xd4, 0xd5, 0xd2, 0xd3, 0xd0, 0xd1,
            0xe6, 0xe7, 0xe4, 0xe5, 0xe2, 0xe3, 0xe0, 0xe1, 0xee, 0xef, 0xec, 0xed, 0xea, 0xeb, 0xe8, 0xe9,
            0xf4, 0xf5, 0xf6, 0xf7, 0xf0, 0xf1, 0xf2, 0xf3, 0xfc, 0xfd, 0xfe, 0xff, 0xf8, 0xf9, 0xfa, 0xfb];

        let permutation = [1, 4, 5, 0, 13, 6, 9, 2, 7, 12, 3, 8, 11, 14, 15, 10];

        Twine{size: 64, sbox: Sbox::new(8, table), permutation: permutation}
    }
}

impl Cipher for Twine {
    /* Returns the size of the input to TWINE. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in TWINE. This is always 8. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns Feistel function of TWINE represented as an S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the nibble permutation of TWINE to the input.
     *
     * input    Input to be permuted.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut output = 0;

        for i in 0..16 {
            output ^= ((input >> (i*4)) & 0xf) << (self.permutation[i]*4);
        }

        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "TWINE". */
    fn name(&self) -> String {
        String::from("TWINE")
    }
}



/*****************************************************************
                            PUFFIN
******************************************************************/

/* A structure representing the PUFFIN cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The PUFFIN S-box.
 * permutation  The PUFFIN bit permutation.
 */
#[derive(Clone)]
pub struct Puffin {
    size: usize,
    sbox: Sbox,
    permutation: [[u64; 256]; 8]
}

impl Puffin {
    /* Generates a new instance of the PUFFIN cipher */
    pub fn new() -> Puffin {
        let table = vec![0xd, 0x7, 0x3, 0x2, 0x9, 0xa, 0xc, 0x1, 0xf, 0x4, 0x5, 0xe, 0x6, 0x0, 0xb, 0x8];

        let permutation = [[0x0,0x2000,0x4,0x2004,0x1000000000000000,0x1000000000002000,0x1000000000000004,0x1000000000002004,0x4000000000000,0x4000000002000,0x4000000000004,0x4000000002004,0x1004000000000000,0x1004000000002000,0x1004000000000004,0x1004000000002004,0x8000000000000,0x8000000002000,0x8000000000004,0x8000000002004,0x1008000000000000,0x1008000000002000,0x1008000000000004,0x1008000000002004,0xc000000000000,0xc000000002000,0xc000000000004,0xc000000002004,0x100c000000000000,0x100c000000002000,0x100c000000000004,0x100c000000002004,0x8000000,0x8002000,0x8000004,0x8002004,0x1000000008000000,0x1000000008002000,0x1000000008000004,0x1000000008002004,0x4000008000000,0x4000008002000,0x4000008000004,0x4000008002004,0x1004000008000000,0x1004000008002000,0x1004000008000004,0x1004000008002004,0x8000008000000,0x8000008002000,0x8000008000004,0x8000008002004,0x1008000008000000,0x1008000008002000,0x1008000008000004,0x1008000008002004,0xc000008000000,0xc000008002000,0xc000008000004,0xc000008002004,0x100c000008000000,0x100c000008002000,0x100c000008000004,0x100c000008002004,0x400,0x2400,0x404,0x2404,0x1000000000000400,0x1000000000002400,0x1000000000000404,0x1000000000002404,0x4000000000400,0x4000000002400,0x4000000000404,0x4000000002404,0x1004000000000400,0x1004000000002400,0x1004000000000404,0x1004000000002404,0x8000000000400,0x8000000002400,0x8000000000404,0x8000000002404,0x1008000000000400,0x1008000000002400,0x1008000000000404,0x1008000000002404,0xc000000000400,0xc000000002400,0xc000000000404,0xc000000002404,0x100c000000000400,0x100c000000002400,0x100c000000000404,0x100c000000002404,0x8000400,0x8002400,0x8000404,0x8002404,0x1000000008000400,0x1000000008002400,0x1000000008000404,0x1000000008002404,0x4000008000400,0x4000008002400,0x4000008000404,0x4000008002404,0x1004000008000400,0x1004000008002400,0x1004000008000404,0x1004000008002404,0x8000008000400,0x8000008002400,0x8000008000404,0x8000008002404,0x1008000008000400,0x1008000008002400,0x1008000008000404,0x1008000008002404,0xc000008000400,0xc000008002400,0xc000008000404,0xc000008002404,0x100c000008000400,0x100c000008002400,0x100c000008000404,0x100c000008002404,0x1000000000,0x1000002000,0x1000000004,0x1000002004,0x1000001000000000,0x1000001000002000,0x1000001000000004,0x1000001000002004,0x4001000000000,0x4001000002000,0x4001000000004,0x4001000002004,0x1004001000000000,0x1004001000002000,0x1004001000000004,0x1004001000002004,0x8001000000000,0x8001000002000,0x8001000000004,0x8001000002004,0x1008001000000000,0x1008001000002000,0x1008001000000004,0x1008001000002004,0xc001000000000,0xc001000002000,0xc001000000004,0xc001000002004,0x100c001000000000,0x100c001000002000,0x100c001000000004,0x100c001000002004,0x1008000000,0x1008002000,0x1008000004,0x1008002004,0x1000001008000000,0x1000001008002000,0x1000001008000004,0x1000001008002004,0x4001008000000,0x4001008002000,0x4001008000004,0x4001008002004,0x1004001008000000,0x1004001008002000,0x1004001008000004,0x1004001008002004,0x8001008000000,0x8001008002000,0x8001008000004,0x8001008002004,0x1008001008000000,0x1008001008002000,0x1008001008000004,0x1008001008002004,0xc001008000000,0xc001008002000,0xc001008000004,0xc001008002004,0x100c001008000000,0x100c001008002000,0x100c001008000004,0x100c001008002004,0x1000000400,0x1000002400,0x1000000404,0x1000002404,0x1000001000000400,0x1000001000002400,0x1000001000000404,0x1000001000002404,0x4001000000400,0x4001000002400,0x4001000000404,0x4001000002404,0x1004001000000400,0x1004001000002400,0x1004001000000404,0x1004001000002404,0x8001000000400,0x8001000002400,0x8001000000404,0x8001000002404,0x1008001000000400,0x1008001000002400,0x1008001000000404,0x1008001000002404,0xc001000000400,0xc001000002400,0xc001000000404,0xc001000002404,0x100c001000000400,0x100c001000002400,0x100c001000000404,0x100c001000002404,0x1008000400,0x1008002400,0x1008000404,0x1008002404,0x1000001008000400,0x1000001008002400,0x1000001008000404,0x1000001008002404,0x4001008000400,0x4001008002400,0x4001008000404,0x4001008002404,0x1004001008000400,0x1004001008002400,0x1004001008000404,0x1004001008002404,0x8001008000400,0x8001008002400,0x8001008000404,0x8001008002404,0x1008001008000400,0x1008001008002400,0x1008001008000404,0x1008001008002404,0xc001008000400,0xc001008002400,0xc001008000404,0xc001008002404,0x100c001008000400,0x100c001008002400,0x100c001008000404,0x100c001008002404],
                           [0x0,0x2000000,0x80,0x2000080,0x100000000,0x102000000,0x100000080,0x102000080,0x2000000000000000,0x2000000002000000,0x2000000000000080,0x2000000002000080,0x2000000100000000,0x2000000102000000,0x2000000100000080,0x2000000102000080,0x2,0x2000002,0x82,0x2000082,0x100000002,0x102000002,0x100000082,0x102000082,0x2000000000000002,0x2000000002000002,0x2000000000000082,0x2000000002000082,0x2000000100000002,0x2000000102000002,0x2000000100000082,0x2000000102000082,0x2000000000000,0x2000002000000,0x2000000000080,0x2000002000080,0x2000100000000,0x2000102000000,0x2000100000080,0x2000102000080,0x2002000000000000,0x2002000002000000,0x2002000000000080,0x2002000002000080,0x2002000100000000,0x2002000102000000,0x2002000100000080,0x2002000102000080,0x2000000000002,0x2000002000002,0x2000000000082,0x2000002000082,0x2000100000002,0x2000102000002,0x2000100000082,0x2000102000082,0x2002000000000002,0x2002000002000002,0x2002000000000082,0x2002000002000082,0x2002000100000002,0x2002000102000002,0x2002000100000082,0x2002000102000082,0x800000000000,0x800002000000,0x800000000080,0x800002000080,0x800100000000,0x800102000000,0x800100000080,0x800102000080,0x2000800000000000,0x2000800002000000,0x2000800000000080,0x2000800002000080,0x2000800100000000,0x2000800102000000,0x2000800100000080,0x2000800102000080,0x800000000002,0x800002000002,0x800000000082,0x800002000082,0x800100000002,0x800102000002,0x800100000082,0x800102000082,0x2000800000000002,0x2000800002000002,0x2000800000000082,0x2000800002000082,0x2000800100000002,0x2000800102000002,0x2000800100000082,0x2000800102000082,0x2800000000000,0x2800002000000,0x2800000000080,0x2800002000080,0x2800100000000,0x2800102000000,0x2800100000080,0x2800102000080,0x2002800000000000,0x2002800002000000,0x2002800000000080,0x2002800002000080,0x2002800100000000,0x2002800102000000,0x2002800100000080,0x2002800102000080,0x2800000000002,0x2800002000002,0x2800000000082,0x2800002000082,0x2800100000002,0x2800102000002,0x2800100000082,0x2800102000082,0x2002800000000002,0x2002800002000002,0x2002800000000082,0x2002800002000082,0x2002800100000002,0x2002800102000002,0x2002800100000082,0x2002800102000082,0x80000,0x2080000,0x80080,0x2080080,0x100080000,0x102080000,0x100080080,0x102080080,0x2000000000080000,0x2000000002080000,0x2000000000080080,0x2000000002080080,0x2000000100080000,0x2000000102080000,0x2000000100080080,0x2000000102080080,0x80002,0x2080002,0x80082,0x2080082,0x100080002,0x102080002,0x100080082,0x102080082,0x2000000000080002,0x2000000002080002,0x2000000000080082,0x2000000002080082,0x2000000100080002,0x2000000102080002,0x2000000100080082,0x2000000102080082,0x2000000080000,0x2000002080000,0x2000000080080,0x2000002080080,0x2000100080000,0x2000102080000,0x2000100080080,0x2000102080080,0x2002000000080000,0x2002000002080000,0x2002000000080080,0x2002000002080080,0x2002000100080000,0x2002000102080000,0x2002000100080080,0x2002000102080080,0x2000000080002,0x2000002080002,0x2000000080082,0x2000002080082,0x2000100080002,0x2000102080002,0x2000100080082,0x2000102080082,0x2002000000080002,0x2002000002080002,0x2002000000080082,0x2002000002080082,0x2002000100080002,0x2002000102080002,0x2002000100080082,0x2002000102080082,0x800000080000,0x800002080000,0x800000080080,0x800002080080,0x800100080000,0x800102080000,0x800100080080,0x800102080080,0x2000800000080000,0x2000800002080000,0x2000800000080080,0x2000800002080080,0x2000800100080000,0x2000800102080000,0x2000800100080080,0x2000800102080080,0x800000080002,0x800002080002,0x800000080082,0x800002080082,0x800100080002,0x800102080002,0x800100080082,0x800102080082,0x2000800000080002,0x2000800002080002,0x2000800000080082,0x2000800002080082,0x2000800100080002,0x2000800102080002,0x2000800100080082,0x2000800102080082,0x2800000080000,0x2800002080000,0x2800000080080,0x2800002080080,0x2800100080000,0x2800102080000,0x2800100080080,0x2800102080080,0x2002800000080000,0x2002800002080000,0x2002800000080080,0x2002800002080080,0x2002800100080000,0x2002800102080000,0x2002800100080080,0x2002800102080080,0x2800000080002,0x2800002080002,0x2800000080082,0x2800002080082,0x2800100080002,0x2800102080002,0x2800100080082,0x2800102080082,0x2002800000080002,0x2002800002080002,0x2002800000080082,0x2002800002080082,0x2002800100080002,0x2002800102080002,0x2002800100080082,0x2002800102080082],
                           [0x0,0x400000000,0x20000000000000,0x20000400000000,0x10000,0x400010000,0x20000000010000,0x20000400010000,0x400000,0x400400000,0x20000000400000,0x20000400400000,0x410000,0x400410000,0x20000000410000,0x20000400410000,0x200000000000000,0x200000400000000,0x220000000000000,0x220000400000000,0x200000000010000,0x200000400010000,0x220000000010000,0x220000400010000,0x200000000400000,0x200000400400000,0x220000000400000,0x220000400400000,0x200000000410000,0x200000400410000,0x220000000410000,0x220000400410000,0x100000,0x400100000,0x20000000100000,0x20000400100000,0x110000,0x400110000,0x20000000110000,0x20000400110000,0x500000,0x400500000,0x20000000500000,0x20000400500000,0x510000,0x400510000,0x20000000510000,0x20000400510000,0x200000000100000,0x200000400100000,0x220000000100000,0x220000400100000,0x200000000110000,0x200000400110000,0x220000000110000,0x220000400110000,0x200000000500000,0x200000400500000,0x220000000500000,0x220000400500000,0x200000000510000,0x200000400510000,0x220000000510000,0x220000400510000,0x1000000000000,0x1000400000000,0x21000000000000,0x21000400000000,0x1000000010000,0x1000400010000,0x21000000010000,0x21000400010000,0x1000000400000,0x1000400400000,0x21000000400000,0x21000400400000,0x1000000410000,0x1000400410000,0x21000000410000,0x21000400410000,0x201000000000000,0x201000400000000,0x221000000000000,0x221000400000000,0x201000000010000,0x201000400010000,0x221000000010000,0x221000400010000,0x201000000400000,0x201000400400000,0x221000000400000,0x221000400400000,0x201000000410000,0x201000400410000,0x221000000410000,0x221000400410000,0x1000000100000,0x1000400100000,0x21000000100000,0x21000400100000,0x1000000110000,0x1000400110000,0x21000000110000,0x21000400110000,0x1000000500000,0x1000400500000,0x21000000500000,0x21000400500000,0x1000000510000,0x1000400510000,0x21000000510000,0x21000400510000,0x201000000100000,0x201000400100000,0x221000000100000,0x221000400100000,0x201000000110000,0x201000400110000,0x221000000110000,0x221000400110000,0x201000000500000,0x201000400500000,0x221000000500000,0x221000400500000,0x201000000510000,0x201000400510000,0x221000000510000,0x221000400510000,0x20000000000,0x20400000000,0x20020000000000,0x20020400000000,0x20000010000,0x20400010000,0x20020000010000,0x20020400010000,0x20000400000,0x20400400000,0x20020000400000,0x20020400400000,0x20000410000,0x20400410000,0x20020000410000,0x20020400410000,0x200020000000000,0x200020400000000,0x220020000000000,0x220020400000000,0x200020000010000,0x200020400010000,0x220020000010000,0x220020400010000,0x200020000400000,0x200020400400000,0x220020000400000,0x220020400400000,0x200020000410000,0x200020400410000,0x220020000410000,0x220020400410000,0x20000100000,0x20400100000,0x20020000100000,0x20020400100000,0x20000110000,0x20400110000,0x20020000110000,0x20020400110000,0x20000500000,0x20400500000,0x20020000500000,0x20020400500000,0x20000510000,0x20400510000,0x20020000510000,0x20020400510000,0x200020000100000,0x200020400100000,0x220020000100000,0x220020400100000,0x200020000110000,0x200020400110000,0x220020000110000,0x220020400110000,0x200020000500000,0x200020400500000,0x220020000500000,0x220020400500000,0x200020000510000,0x200020400510000,0x220020000510000,0x220020400510000,0x1020000000000,0x1020400000000,0x21020000000000,0x21020400000000,0x1020000010000,0x1020400010000,0x21020000010000,0x21020400010000,0x1020000400000,0x1020400400000,0x21020000400000,0x21020400400000,0x1020000410000,0x1020400410000,0x21020000410000,0x21020400410000,0x201020000000000,0x201020400000000,0x221020000000000,0x221020400000000,0x201020000010000,0x201020400010000,0x221020000010000,0x221020400010000,0x201020000400000,0x201020400400000,0x221020000400000,0x221020400400000,0x201020000410000,0x201020400410000,0x221020000410000,0x221020400410000,0x1020000100000,0x1020400100000,0x21020000100000,0x21020400100000,0x1020000110000,0x1020400110000,0x21020000110000,0x21020400110000,0x1020000500000,0x1020400500000,0x21020000500000,0x21020400500000,0x1020000510000,0x1020400510000,0x21020000510000,0x21020400510000,0x201020000100000,0x201020400100000,0x221020000100000,0x221020400100000,0x201020000110000,0x201020400110000,0x221020000110000,0x221020400110000,0x201020000500000,0x201020400500000,0x221020000500000,0x221020400500000,0x201020000510000,0x201020400510000,0x221020000510000,0x221020400510000],
                           [0x0,0x200,0x10000000000000,0x10000000000200,0x40,0x240,0x10000000000040,0x10000000000240,0x80000000,0x80000200,0x10000080000000,0x10000080000200,0x80000040,0x80000240,0x10000080000040,0x10000080000240,0x4000000000000000,0x4000000000000200,0x4010000000000000,0x4010000000000200,0x4000000000000040,0x4000000000000240,0x4010000000000040,0x4010000000000240,0x4000000080000000,0x4000000080000200,0x4010000080000000,0x4010000080000200,0x4000000080000040,0x4000000080000240,0x4010000080000040,0x4010000080000240,0x40000000,0x40000200,0x10000040000000,0x10000040000200,0x40000040,0x40000240,0x10000040000040,0x10000040000240,0xc0000000,0xc0000200,0x100000c0000000,0x100000c0000200,0xc0000040,0xc0000240,0x100000c0000040,0x100000c0000240,0x4000000040000000,0x4000000040000200,0x4010000040000000,0x4010000040000200,0x4000000040000040,0x4000000040000240,0x4010000040000040,0x4010000040000240,0x40000000c0000000,0x40000000c0000200,0x40100000c0000000,0x40100000c0000200,0x40000000c0000040,0x40000000c0000240,0x40100000c0000040,0x40100000c0000240,0x10000000,0x10000200,0x10000010000000,0x10000010000200,0x10000040,0x10000240,0x10000010000040,0x10000010000240,0x90000000,0x90000200,0x10000090000000,0x10000090000200,0x90000040,0x90000240,0x10000090000040,0x10000090000240,0x4000000010000000,0x4000000010000200,0x4010000010000000,0x4010000010000200,0x4000000010000040,0x4000000010000240,0x4010000010000040,0x4010000010000240,0x4000000090000000,0x4000000090000200,0x4010000090000000,0x4010000090000200,0x4000000090000040,0x4000000090000240,0x4010000090000040,0x4010000090000240,0x50000000,0x50000200,0x10000050000000,0x10000050000200,0x50000040,0x50000240,0x10000050000040,0x10000050000240,0xd0000000,0xd0000200,0x100000d0000000,0x100000d0000200,0xd0000040,0xd0000240,0x100000d0000040,0x100000d0000240,0x4000000050000000,0x4000000050000200,0x4010000050000000,0x4010000050000200,0x4000000050000040,0x4000000050000240,0x4010000050000040,0x4010000050000240,0x40000000d0000000,0x40000000d0000200,0x40100000d0000000,0x40100000d0000200,0x40000000d0000040,0x40000000d0000240,0x40100000d0000040,0x40100000d0000240,0x800,0xa00,0x10000000000800,0x10000000000a00,0x840,0xa40,0x10000000000840,0x10000000000a40,0x80000800,0x80000a00,0x10000080000800,0x10000080000a00,0x80000840,0x80000a40,0x10000080000840,0x10000080000a40,0x4000000000000800,0x4000000000000a00,0x4010000000000800,0x4010000000000a00,0x4000000000000840,0x4000000000000a40,0x4010000000000840,0x4010000000000a40,0x4000000080000800,0x4000000080000a00,0x4010000080000800,0x4010000080000a00,0x4000000080000840,0x4000000080000a40,0x4010000080000840,0x4010000080000a40,0x40000800,0x40000a00,0x10000040000800,0x10000040000a00,0x40000840,0x40000a40,0x10000040000840,0x10000040000a40,0xc0000800,0xc0000a00,0x100000c0000800,0x100000c0000a00,0xc0000840,0xc0000a40,0x100000c0000840,0x100000c0000a40,0x4000000040000800,0x4000000040000a00,0x4010000040000800,0x4010000040000a00,0x4000000040000840,0x4000000040000a40,0x4010000040000840,0x4010000040000a40,0x40000000c0000800,0x40000000c0000a00,0x40100000c0000800,0x40100000c0000a00,0x40000000c0000840,0x40000000c0000a40,0x40100000c0000840,0x40100000c0000a40,0x10000800,0x10000a00,0x10000010000800,0x10000010000a00,0x10000840,0x10000a40,0x10000010000840,0x10000010000a40,0x90000800,0x90000a00,0x10000090000800,0x10000090000a00,0x90000840,0x90000a40,0x10000090000840,0x10000090000a40,0x4000000010000800,0x4000000010000a00,0x4010000010000800,0x4010000010000a00,0x4000000010000840,0x4000000010000a40,0x4010000010000840,0x4010000010000a40,0x4000000090000800,0x4000000090000a00,0x4010000090000800,0x4010000090000a00,0x4000000090000840,0x4000000090000a40,0x4010000090000840,0x4010000090000a40,0x50000800,0x50000a00,0x10000050000800,0x10000050000a00,0x50000840,0x50000a40,0x10000050000840,0x10000050000a40,0xd0000800,0xd0000a00,0x100000d0000800,0x100000d0000a00,0xd0000840,0xd0000a40,0x100000d0000840,0x100000d0000a40,0x4000000050000800,0x4000000050000a00,0x4010000050000800,0x4010000050000a00,0x4000000050000840,0x4000000050000a40,0x4010000050000840,0x4010000050000a40,0x40000000d0000800,0x40000000d0000a00,0x40100000d0000800,0x40100000d0000a00,0x40000000d0000840,0x40000000d0000a40,0x40100000d0000840,0x40100000d0000a40],
                           [0x0,0x2000000000,0x20000,0x2000020000,0x400000000000000,0x400002000000000,0x400000000020000,0x400002000020000,0x100,0x2000000100,0x20100,0x2000020100,0x400000000000100,0x400002000000100,0x400000000020100,0x400002000020100,0x200000000,0x2200000000,0x200020000,0x2200020000,0x400000200000000,0x400002200000000,0x400000200020000,0x400002200020000,0x200000100,0x2200000100,0x200020100,0x2200020100,0x400000200000100,0x400002200000100,0x400000200020100,0x400002200020100,0x100000000000,0x102000000000,0x100000020000,0x102000020000,0x400100000000000,0x400102000000000,0x400100000020000,0x400102000020000,0x100000000100,0x102000000100,0x100000020100,0x102000020100,0x400100000000100,0x400102000000100,0x400100000020100,0x400102000020100,0x100200000000,0x102200000000,0x100200020000,0x102200020000,0x400100200000000,0x400102200000000,0x400100200020000,0x400102200020000,0x100200000100,0x102200000100,0x100200020100,0x102200020100,0x400100200000100,0x400102200000100,0x400100200020100,0x400102200020100,0x400000000000,0x402000000000,0x400000020000,0x402000020000,0x400400000000000,0x400402000000000,0x400400000020000,0x400402000020000,0x400000000100,0x402000000100,0x400000020100,0x402000020100,0x400400000000100,0x400402000000100,0x400400000020100,0x400402000020100,0x400200000000,0x402200000000,0x400200020000,0x402200020000,0x400400200000000,0x400402200000000,0x400400200020000,0x400402200020000,0x400200000100,0x402200000100,0x400200020100,0x402200020100,0x400400200000100,0x400402200000100,0x400400200020100,0x400402200020100,0x500000000000,0x502000000000,0x500000020000,0x502000020000,0x400500000000000,0x400502000000000,0x400500000020000,0x400502000020000,0x500000000100,0x502000000100,0x500000020100,0x502000020100,0x400500000000100,0x400502000000100,0x400500000020100,0x400502000020100,0x500200000000,0x502200000000,0x500200020000,0x502200020000,0x400500200000000,0x400502200000000,0x400500200020000,0x400502200020000,0x500200000100,0x502200000100,0x500200020100,0x502200020100,0x400500200000100,0x400502200000100,0x400500200020100,0x400502200020100,0x800000000000000,0x800002000000000,0x800000000020000,0x800002000020000,0xc00000000000000,0xc00002000000000,0xc00000000020000,0xc00002000020000,0x800000000000100,0x800002000000100,0x800000000020100,0x800002000020100,0xc00000000000100,0xc00002000000100,0xc00000000020100,0xc00002000020100,0x800000200000000,0x800002200000000,0x800000200020000,0x800002200020000,0xc00000200000000,0xc00002200000000,0xc00000200020000,0xc00002200020000,0x800000200000100,0x800002200000100,0x800000200020100,0x800002200020100,0xc00000200000100,0xc00002200000100,0xc00000200020100,0xc00002200020100,0x800100000000000,0x800102000000000,0x800100000020000,0x800102000020000,0xc00100000000000,0xc00102000000000,0xc00100000020000,0xc00102000020000,0x800100000000100,0x800102000000100,0x800100000020100,0x800102000020100,0xc00100000000100,0xc00102000000100,0xc00100000020100,0xc00102000020100,0x800100200000000,0x800102200000000,0x800100200020000,0x800102200020000,0xc00100200000000,0xc00102200000000,0xc00100200020000,0xc00102200020000,0x800100200000100,0x800102200000100,0x800100200020100,0x800102200020100,0xc00100200000100,0xc00102200000100,0xc00100200020100,0xc00102200020100,0x800400000000000,0x800402000000000,0x800400000020000,0x800402000020000,0xc00400000000000,0xc00402000000000,0xc00400000020000,0xc00402000020000,0x800400000000100,0x800402000000100,0x800400000020100,0x800402000020100,0xc00400000000100,0xc00402000000100,0xc00400000020100,0xc00402000020100,0x800400200000000,0x800402200000000,0x800400200020000,0x800402200020000,0xc00400200000000,0xc00402200000000,0xc00400200020000,0xc00402200020000,0x800400200000100,0x800402200000100,0x800400200020100,0x800402200020100,0xc00400200000100,0xc00402200000100,0xc00400200020100,0xc00402200020100,0x800500000000000,0x800502000000000,0x800500000020000,0x800502000020000,0xc00500000000000,0xc00502000000000,0xc00500000020000,0xc00502000020000,0x800500000000100,0x800502000000100,0x800500000020100,0x800502000020100,0xc00500000000100,0xc00502000000100,0xc00500000020100,0xc00502000020100,0x800500200000000,0x800502200000000,0x800500200020000,0x800502200020000,0xc00500200000000,0xc00502200000000,0xc00500200020000,0xc00502200020000,0x800500200000100,0x800502200000100,0x800500200020100,0x800502200020100,0xc00500200000100,0xc00502200000100,0xc00500200020100,0xc00502200020100],
                           [0x0,0x1000000,0x80000000000000,0x80000001000000,0x8000000000000000,0x8000000001000000,0x8080000000000000,0x8080000001000000,0x4000000000,0x4001000000,0x80004000000000,0x80004001000000,0x8000004000000000,0x8000004001000000,0x8080004000000000,0x8080004001000000,0x100000000000000,0x100000001000000,0x180000000000000,0x180000001000000,0x8100000000000000,0x8100000001000000,0x8180000000000000,0x8180000001000000,0x100004000000000,0x100004001000000,0x180004000000000,0x180004001000000,0x8100004000000000,0x8100004001000000,0x8180004000000000,0x8180004001000000,0x8000000000,0x8001000000,0x80008000000000,0x80008001000000,0x8000008000000000,0x8000008001000000,0x8080008000000000,0x8080008001000000,0xc000000000,0xc001000000,0x8000c000000000,0x8000c001000000,0x800000c000000000,0x800000c001000000,0x808000c000000000,0x808000c001000000,0x100008000000000,0x100008001000000,0x180008000000000,0x180008001000000,0x8100008000000000,0x8100008001000000,0x8180008000000000,0x8180008001000000,0x10000c000000000,0x10000c001000000,0x18000c000000000,0x18000c001000000,0x810000c000000000,0x810000c001000000,0x818000c000000000,0x818000c001000000,0x8000,0x1008000,0x80000000008000,0x80000001008000,0x8000000000008000,0x8000000001008000,0x8080000000008000,0x8080000001008000,0x4000008000,0x4001008000,0x80004000008000,0x80004001008000,0x8000004000008000,0x8000004001008000,0x8080004000008000,0x8080004001008000,0x100000000008000,0x100000001008000,0x180000000008000,0x180000001008000,0x8100000000008000,0x8100000001008000,0x8180000000008000,0x8180000001008000,0x100004000008000,0x100004001008000,0x180004000008000,0x180004001008000,0x8100004000008000,0x8100004001008000,0x8180004000008000,0x8180004001008000,0x8000008000,0x8001008000,0x80008000008000,0x80008001008000,0x8000008000008000,0x8000008001008000,0x8080008000008000,0x8080008001008000,0xc000008000,0xc001008000,0x8000c000008000,0x8000c001008000,0x800000c000008000,0x800000c001008000,0x808000c000008000,0x808000c001008000,0x100008000008000,0x100008001008000,0x180008000008000,0x180008001008000,0x8100008000008000,0x8100008001008000,0x8180008000008000,0x8180008001008000,0x10000c000008000,0x10000c001008000,0x18000c000008000,0x18000c001008000,0x810000c000008000,0x810000c001008000,0x818000c000008000,0x818000c001008000,0x800000,0x1800000,0x80000000800000,0x80000001800000,0x8000000000800000,0x8000000001800000,0x8080000000800000,0x8080000001800000,0x4000800000,0x4001800000,0x80004000800000,0x80004001800000,0x8000004000800000,0x8000004001800000,0x8080004000800000,0x8080004001800000,0x100000000800000,0x100000001800000,0x180000000800000,0x180000001800000,0x8100000000800000,0x8100000001800000,0x8180000000800000,0x8180000001800000,0x100004000800000,0x100004001800000,0x180004000800000,0x180004001800000,0x8100004000800000,0x8100004001800000,0x8180004000800000,0x8180004001800000,0x8000800000,0x8001800000,0x80008000800000,0x80008001800000,0x8000008000800000,0x8000008001800000,0x8080008000800000,0x8080008001800000,0xc000800000,0xc001800000,0x8000c000800000,0x8000c001800000,0x800000c000800000,0x800000c001800000,0x808000c000800000,0x808000c001800000,0x100008000800000,0x100008001800000,0x180008000800000,0x180008001800000,0x8100008000800000,0x8100008001800000,0x8180008000800000,0x8180008001800000,0x10000c000800000,0x10000c001800000,0x18000c000800000,0x18000c001800000,0x810000c000800000,0x810000c001800000,0x818000c000800000,0x818000c001800000,0x808000,0x1808000,0x80000000808000,0x80000001808000,0x8000000000808000,0x8000000001808000,0x8080000000808000,0x8080000001808000,0x4000808000,0x4001808000,0x80004000808000,0x80004001808000,0x8000004000808000,0x8000004001808000,0x8080004000808000,0x8080004001808000,0x100000000808000,0x100000001808000,0x180000000808000,0x180000001808000,0x8100000000808000,0x8100000001808000,0x8180000000808000,0x8180000001808000,0x100004000808000,0x100004001808000,0x180004000808000,0x180004001808000,0x8100004000808000,0x8100004001808000,0x8180004000808000,0x8180004001808000,0x8000808000,0x8001808000,0x80008000808000,0x80008001808000,0x8000008000808000,0x8000008001808000,0x8080008000808000,0x8080008001808000,0xc000808000,0xc001808000,0x8000c000808000,0x8000c001808000,0x800000c000808000,0x800000c001808000,0x808000c000808000,0x808000c001808000,0x100008000808000,0x100008001808000,0x180008000808000,0x180008001808000,0x8100008000808000,0x8100008001808000,0x8180008000808000,0x8180008001808000,0x10000c000808000,0x10000c001808000,0x18000c000808000,0x18000c001808000,0x810000c000808000,0x810000c001808000,0x818000c000808000,0x818000c001808000],
                           [0x0,0x4000,0x10,0x4010,0x20,0x4020,0x30,0x4030,0x4000000,0x4004000,0x4000010,0x4004010,0x4000020,0x4004020,0x4000030,0x4004030,0x40000,0x44000,0x40010,0x44010,0x40020,0x44020,0x40030,0x44030,0x4040000,0x4044000,0x4040010,0x4044010,0x4040020,0x4044020,0x4040030,0x4044030,0x40000000000000,0x40000000004000,0x40000000000010,0x40000000004010,0x40000000000020,0x40000000004020,0x40000000000030,0x40000000004030,0x40000004000000,0x40000004004000,0x40000004000010,0x40000004004010,0x40000004000020,0x40000004004020,0x40000004000030,0x40000004004030,0x40000000040000,0x40000000044000,0x40000000040010,0x40000000044010,0x40000000040020,0x40000000044020,0x40000000040030,0x40000000044030,0x40000004040000,0x40000004044000,0x40000004040010,0x40000004044010,0x40000004040020,0x40000004044020,0x40000004040030,0x40000004044030,0x40000000000,0x40000004000,0x40000000010,0x40000004010,0x40000000020,0x40000004020,0x40000000030,0x40000004030,0x40004000000,0x40004004000,0x40004000010,0x40004004010,0x40004000020,0x40004004020,0x40004000030,0x40004004030,0x40000040000,0x40000044000,0x40000040010,0x40000044010,0x40000040020,0x40000044020,0x40000040030,0x40000044030,0x40004040000,0x40004044000,0x40004040010,0x40004044010,0x40004040020,0x40004044020,0x40004040030,0x40004044030,0x40040000000000,0x40040000004000,0x40040000000010,0x40040000004010,0x40040000000020,0x40040000004020,0x40040000000030,0x40040000004030,0x40040004000000,0x40040004004000,0x40040004000010,0x40040004004010,0x40040004000020,0x40040004004020,0x40040004000030,0x40040004004030,0x40040000040000,0x40040000044000,0x40040000040010,0x40040000044010,0x40040000040020,0x40040000044020,0x40040000040030,0x40040000044030,0x40040004040000,0x40040004044000,0x40040004040010,0x40040004044010,0x40040004040020,0x40040004044020,0x40040004040030,0x40040004044030,0x200000000000,0x200000004000,0x200000000010,0x200000004010,0x200000000020,0x200000004020,0x200000000030,0x200000004030,0x200004000000,0x200004004000,0x200004000010,0x200004004010,0x200004000020,0x200004004020,0x200004000030,0x200004004030,0x200000040000,0x200000044000,0x200000040010,0x200000044010,0x200000040020,0x200000044020,0x200000040030,0x200000044030,0x200004040000,0x200004044000,0x200004040010,0x200004044010,0x200004040020,0x200004044020,0x200004040030,0x200004044030,0x40200000000000,0x40200000004000,0x40200000000010,0x40200000004010,0x40200000000020,0x40200000004020,0x40200000000030,0x40200000004030,0x40200004000000,0x40200004004000,0x40200004000010,0x40200004004010,0x40200004000020,0x40200004004020,0x40200004000030,0x40200004004030,0x40200000040000,0x40200000044000,0x40200000040010,0x40200000044010,0x40200000040020,0x40200000044020,0x40200000040030,0x40200000044030,0x40200004040000,0x40200004044000,0x40200004040010,0x40200004044010,0x40200004040020,0x40200004044020,0x40200004040030,0x40200004044030,0x240000000000,0x240000004000,0x240000000010,0x240000004010,0x240000000020,0x240000004020,0x240000000030,0x240000004030,0x240004000000,0x240004004000,0x240004000010,0x240004004010,0x240004000020,0x240004004020,0x240004000030,0x240004004030,0x240000040000,0x240000044000,0x240000040010,0x240000044010,0x240000040020,0x240000044020,0x240000040030,0x240000044030,0x240004040000,0x240004044000,0x240004040010,0x240004044010,0x240004040020,0x240004044020,0x240004040030,0x240004044030,0x40240000000000,0x40240000004000,0x40240000000010,0x40240000004010,0x40240000000020,0x40240000004020,0x40240000000030,0x40240000004030,0x40240004000000,0x40240004004000,0x40240004000010,0x40240004004010,0x40240004000020,0x40240004004020,0x40240004000030,0x40240004004030,0x40240000040000,0x40240000044000,0x40240000040010,0x40240000044010,0x40240000040020,0x40240000044020,0x40240000040030,0x40240000044030,0x40240004040000,0x40240004044000,0x40240004040010,0x40240004044010,0x40240004040020,0x40240004044020,0x40240004040030,0x40240004044030],
                           [0x0,0x200000,0x800000000,0x800200000,0x10000000000,0x10000200000,0x10800000000,0x10800200000,0x8,0x200008,0x800000008,0x800200008,0x10000000008,0x10000200008,0x10800000008,0x10800200008,0x1000,0x201000,0x800001000,0x800201000,0x10000001000,0x10000201000,0x10800001000,0x10800201000,0x1008,0x201008,0x800001008,0x800201008,0x10000001008,0x10000201008,0x10800001008,0x10800201008,0x20000000,0x20200000,0x820000000,0x820200000,0x10020000000,0x10020200000,0x10820000000,0x10820200000,0x20000008,0x20200008,0x820000008,0x820200008,0x10020000008,0x10020200008,0x10820000008,0x10820200008,0x20001000,0x20201000,0x820001000,0x820201000,0x10020001000,0x10020201000,0x10820001000,0x10820201000,0x20001008,0x20201008,0x820001008,0x820201008,0x10020001008,0x10020201008,0x10820001008,0x10820201008,0x80000000000,0x80000200000,0x80800000000,0x80800200000,0x90000000000,0x90000200000,0x90800000000,0x90800200000,0x80000000008,0x80000200008,0x80800000008,0x80800200008,0x90000000008,0x90000200008,0x90800000008,0x90800200008,0x80000001000,0x80000201000,0x80800001000,0x80800201000,0x90000001000,0x90000201000,0x90800001000,0x90800201000,0x80000001008,0x80000201008,0x80800001008,0x80800201008,0x90000001008,0x90000201008,0x90800001008,0x90800201008,0x80020000000,0x80020200000,0x80820000000,0x80820200000,0x90020000000,0x90020200000,0x90820000000,0x90820200000,0x80020000008,0x80020200008,0x80820000008,0x80820200008,0x90020000008,0x90020200008,0x90820000008,0x90820200008,0x80020001000,0x80020201000,0x80820001000,0x80820201000,0x90020001000,0x90020201000,0x90820001000,0x90820201000,0x80020001008,0x80020201008,0x80820001008,0x80820201008,0x90020001008,0x90020201008,0x90820001008,0x90820201008,0x1,0x200001,0x800000001,0x800200001,0x10000000001,0x10000200001,0x10800000001,0x10800200001,0x9,0x200009,0x800000009,0x800200009,0x10000000009,0x10000200009,0x10800000009,0x10800200009,0x1001,0x201001,0x800001001,0x800201001,0x10000001001,0x10000201001,0x10800001001,0x10800201001,0x1009,0x201009,0x800001009,0x800201009,0x10000001009,0x10000201009,0x10800001009,0x10800201009,0x20000001,0x20200001,0x820000001,0x820200001,0x10020000001,0x10020200001,0x10820000001,0x10820200001,0x20000009,0x20200009,0x820000009,0x820200009,0x10020000009,0x10020200009,0x10820000009,0x10820200009,0x20001001,0x20201001,0x820001001,0x820201001,0x10020001001,0x10020201001,0x10820001001,0x10820201001,0x20001009,0x20201009,0x820001009,0x820201009,0x10020001009,0x10020201009,0x10820001009,0x10820201009,0x80000000001,0x80000200001,0x80800000001,0x80800200001,0x90000000001,0x90000200001,0x90800000001,0x90800200001,0x80000000009,0x80000200009,0x80800000009,0x80800200009,0x90000000009,0x90000200009,0x90800000009,0x90800200009,0x80000001001,0x80000201001,0x80800001001,0x80800201001,0x90000001001,0x90000201001,0x90800001001,0x90800201001,0x80000001009,0x80000201009,0x80800001009,0x80800201009,0x90000001009,0x90000201009,0x90800001009,0x90800201009,0x80020000001,0x80020200001,0x80820000001,0x80820200001,0x90020000001,0x90020200001,0x90820000001,0x90820200001,0x80020000009,0x80020200009,0x80820000009,0x80820200009,0x90020000009,0x90020200009,0x90820000009,0x90820200009,0x80020001001,0x80020201001,0x80820001001,0x80820201001,0x90020001001,0x90020201001,0x90820001001,0x90820201001,0x80020001009,0x80020201009,0x80820001009,0x80820201009,0x90020001009,0x90020201009,0x90820001009,0x90820201009,]];

        Puffin{size: 64, sbox: Sbox::new(4, table), permutation: permutation}
    }
}

impl Cipher for Puffin {
    /* Returns the size of the input to PUFFIN. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in PUFFIN. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the PUFFIN S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the bit permutation of PUFFIN to the input.
     *
     * input    Input to be permuted.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut output = 0;

        for i in 0..8 {
            output ^= self.permutation[i][((input >> (i*8)) & 0xff) as usize];
        }

        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "PUFFIN". */
    fn name(&self) -> String {
        String::from("PUFFIN")
    }
}



/*****************************************************************
                            SKINNY
******************************************************************/

/* A structure representing the SKINNY cipher.
 *
 * size                 Size of the cipher in bits. This is fixed to 64.
 * sbox                 The SKINNY S-box.
 * shift_rows_table     Permutation used for ShiftRows.
 */
#[derive(Clone)]
pub struct Skinny {
    size: usize,
    sbox: Sbox,
    shift_rows_table: [usize; 16]
}

impl Skinny {
    /* Generates a new instance of the SKINNY cipher */
    pub fn new() -> Skinny {
        let table = vec![0xc, 0x6, 0x9, 0x0, 0x1, 0xa, 0x2, 0xb, 0x3, 0x8, 0x5, 0xd, 0x4, 0xe, 0x7, 0xf];
        let shift_rows_table = [0, 1, 2, 3, 7, 4, 5, 6, 10, 11, 8, 9, 13, 14, 15, 12];
        Skinny{size: 64, sbox: Sbox::new(4, table), shift_rows_table: shift_rows_table}
    }
}

impl Cipher for Skinny {
    /* Returns the size of the input to SKINNY. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in SKINNY. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the SKINNY S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the ShiftRows and MixColumns steps of SKINNY to the input.
     *
     * input    Input to be transformed.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut output = 0;

        // Apply ShiftRows
        for i in 0..16 {
            output ^= ((input >> (i*4)) & 0xf) << (self.shift_rows_table[i]*4);
        }

        // Apply MixColumns
        output ^= (output & 0xffff00000000) >> 16;
        output ^= (output & 0xffff) << 32;
        output ^= (output & 0xffff00000000) << 16;
        output = (output << 16) ^ (output >> 48);

        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "SKINNY". */
    fn name(&self) -> String {
        String::from("SKINNY")
    }
}




/*****************************************************************
                            Midori
******************************************************************/

/* A structure representing the Midori cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The Midori S-box.
 */
#[derive(Clone)]
pub struct Midori {
    size: usize,
    sbox: Sbox,
    shuffle_cell_table: [usize; 16]
}

impl Midori {
    /* Generates a new instance of the Midori cipher */
    pub fn new() -> Midori {
        let table = vec![0xc, 0xa, 0xd, 0x3, 0xe, 0xb, 0xf, 0x7, 0x8, 0x9, 0x1, 0x5, 0x0, 0x2, 0x4, 0x6];
        let shuffle_cell_table = [00, 07, 14, 09, 05, 02, 11, 12, 15, 08, 01, 06, 10, 13, 04, 03];
        Midori{size: 64, sbox: Sbox::new(4, table), shuffle_cell_table: shuffle_cell_table}
    }
}

impl Cipher for Midori {
    /* Returns the size of the input to Midori. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in Midori. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the Midori S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the ShuffleCell and MixColumn steps of Midori to the input.
     *
     * input    Input to be transformed.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut x = 0;

        // Apply ShuffleCell
        for i in 0..16 {
            x ^= ((input >> (i*4)) & 0xf) << (self.shuffle_cell_table[i]*4);
        }

        // Apply MixColumn
        let mut output = 0;

        output ^= (x & 0x00f000f000f000f0) >> 4
                ^ (x & 0x0f000f000f000f00) >> 8
                ^ (x & 0xf000f000f000f000) >> 12;

        output ^= (x & 0x000f000f000f000f) << 4
                ^ (x & 0x0f000f000f000f00) >> 4
                ^ (x & 0xf000f000f000f000) >> 8;

        output ^= (x & 0x000f000f000f000f) << 8
                ^ (x & 0x00f000f000f000f0) << 4
                ^ (x & 0xf000f000f000f000) >> 4;

        output ^= (x & 0x000f000f000f000f) << 12
                ^ (x & 0x00f000f000f000f0) << 8
                ^ (x & 0x0f000f000f000f00) << 4;

        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "Midori". */
    fn name(&self) -> String {
        String::from("Midori")
    }
}

/*****************************************************************
                            LED
******************************************************************/

/* A structure representing the LED cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The LED S-box.
 */
#[derive(Clone)]
pub struct Led {
    size: usize,
    sbox: Sbox,
    shift_rows_table: [usize; 16]
}

impl Led {
    /* Generates a new instance of the LED cipher */
    pub fn new() -> Led {
        let table = vec![0xc, 0x5, 0x6, 0xb, 0x9, 0x0, 0xa, 0xd, 0x3, 0xe, 0xf, 0x8, 0x4, 0x7, 0x1, 0x2];
        let shift_rows_table = [0, 1, 2, 3, 7, 4, 5, 6, 10, 11, 8, 9, 13, 14, 15, 12];
        Led{size: 64, sbox: Sbox::new(4, table), shift_rows_table: shift_rows_table}
    }
}

fn led_times2(x: u64) -> u64 {
    ((x & 0x7777) << 1) ^ ((x & 0x8888) >> 3) ^ ((x & 0x8888) >> 2)
}

impl Cipher for Led {
    /* Returns the size of the input to LED. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in LED. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the LED S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the ShuffleCell and MixColumn steps of LED to the input.
     *
     * input    Input to be transformed.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut x = 0;

        // Apply ShiftRows
        for i in 0..16 {
            x ^= ((input >> (i*4)) & 0xf) << (self.shift_rows_table[i]*4);
        }

        // Apply MixColumnsSerial
        let mut y = 0;

        for _ in 0..4 {
            y = x >> 16;
            y ^= led_times2(led_times2(x & 0xffff)) << 48;
            y ^= (x & 0xffff0000) << 32;
            y ^= led_times2((x & 0xffff00000000) >> 32) << 48;
            y ^= led_times2((x & 0xffff000000000000) >> 48) << 48;
            x = y;
        }

        x
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "LED". */
    fn name(&self) -> String {
        String::from("LED")
    }
}


/*****************************************************************
                            RECTANGLE
******************************************************************/

/* A structure representing the RECTANGLE cipher.
 *
 * size         Size of the cipher in bits. This is fixed to 64.
 * sbox         The RECTANGLE S-box.
 * permutation  The RECTANGLE bit permutation.
 */
#[derive(Clone)]
pub struct Rectangle {
    size: usize,
    sbox: Sbox,
    permutation: [u64; 64]
}

impl Rectangle {
    /* Generates a new instance of the RECTANGLE cipher */
    pub fn new() -> Rectangle {
        let table = vec![0x6, 0x5, 0xc, 0xa, 0x1, 0xe, 0x7, 0x9, 0xb, 0x0, 0x3, 0xd, 0x8, 0xf, 0x4, 0x2];

        let permutation = [ 0,  5, 50, 55,
                            4,  9, 54, 59,
                            8, 13, 58, 63,
                           12, 17, 62,  3,
                           16, 21,  2,  7,
                           20, 25,  6, 11,
                           24, 29, 10, 15,
                           28, 33, 14, 19,
                           32, 37, 18, 23,
                           36, 41, 22, 27,
                           40, 45, 26, 31,
                           44, 49, 30, 35,
                           48, 53, 34, 39,
                           52, 57, 38, 43,
                           56, 61, 42, 47,
                           60,  1, 46, 51];

        Rectangle{size: 64, sbox: Sbox::new(4, table), permutation: permutation}
    }
}

impl Cipher for Rectangle {
    /* Returns the size of the input to RECTANGLE. This is always 64 bits. */
    fn size(&self) -> usize {
        self.size
    }

    /* Returns the number of S-boxes in RECTANGLE. This is always 16. */
    fn num_sboxes(&self) -> usize {
        self.size / self.sbox.size
    }

    /* Returns the RECTANGLE S-box */
    fn sbox(&self) -> &Sbox {
        &self.sbox
    }

    /* Applies the bit permutation of RECTANGLE to the input.
     *
     * input    Input to be permuted.
     */
    fn linear_layer(&self, input: u64) -> u64{
        let mut output = 0;

        for i in 0..64 {
            output ^= ((input >> i) & 0x1) << self.permutation[i];
        }

        output
    }

    fn linear_layer_inv(&self, input: u64) -> u64 {
        panic!("not implemented");
    }

    /* Returns the string "RECTANGLE". */
    fn name(&self) -> String {
        String::from("RECTANGLE")
    }
}
